- name: postgresql
  tags: postgresql
  block:

    # ##################################################
    # CONFIRM
    # ##################################################
    - name: confirm
      pause:
        prompt: "`is_rm_pgdata_dir` is [{{ is_rm_pgdata_dir }}]\nCan I proceed anyway? (y/n)"
      register: yn
      when: is_rm_pgdata_dir
    - name: abort
      fail: msg="Aborted!!"
      when: is_rm_pgdata_dir and yn.user_input | default('n') != 'y'
      run_once: true

    # ##################################################
    # YUM INSTALL
    # ##################################################
    - tags: yum
      block:
        - tags: yum-rpm
          name: "yum install postgresql rpm: {{ rpm.filename }}"
          yum: pkg={{ rpm.baseurl }}{{ rpm.filename }}

        - tags: yum-install
          name: "yum install"
          yum: pkg={{ item }}
          with_items: "{{ rpm.packages }}"

    # ##################################################
    # user
    # ##################################################
    - tags: user
      block:
        - name: password for postgres user
          user:
            name: postgres
            password: "{{ 'postgres' | password_hash('sha512', 'mysecretsalt') }}"
        - name: public key for postgres user
          authorized_key:
            user: postgres
            key: "{{ lookup('pipe', 'ssh-keygen -y -f .vagrant/machines/pg1/virtualbox/private_key') }}"
        - name: copy id_rsa
          copy:
            src: .vagrant/machines/pg1/virtualbox/private_key
            dest: /var/lib/pgsql/.ssh/id_rsa
            owner: postgres
            group: postgres
            mode: 0600
        # - name: remove known_hosts pg1
        #   shell: ssh-keygen -R backend-pg1
        #   become_user: postgres
        # - name: remove known_hosts pg2
        #   shell: ssh-keygen -R backend-pg2
        #   become_user: postgres
        - name: add known_hosts pg1
          shell: ssh-keyscan backend-pg1 > /var/lib/pgsql/.ssh/known_hosts
        - name: add known_hosts pg2
          shell: ssh-keyscan backend-pg2 >> /var/lib/pgsql/.ssh/known_hosts

    # ##################################################
    # create archive and backup directory
    # ##################################################
    - tags: create-directory
      name: create-directory
      file:
        path: "{{ item }}"
        state: directory
        recurse: yes
        owner: postgres
        group: postgres
        # mode:  0755
      with_items:
        - "{{ archive_dir }}"
        - "{{ backup_dir }}"

    # ##################################################
    # .pgpass for replication user
    # ##################################################
    - tags: .pgpass
      name: .pgpass
      blockinfile:
        path: "{{ postgres_home_dir }}.pgpass"
        create: yes
        owner: postgres
        group: postgres
        mode: 0600
        content: "{{ pgpass.entries | join('\n') }}"

    # ##################################################
    # initdb
    # ##################################################
    - tags: initdb
      block:
        - name: rm pgdata_dir
          when: is_rm_pgdata_dir
          file:
            path:  "{{ pgdata_dir }}"
            state: "{{ item }}"
            owner: postgres
            group: postgres
            mode:  0600
          with_items:
            - absent
            - directory

        - name: pwfile
          copy: dest="{{ initdb.pwfile }}" content=postgres
          changed_when: false

        - name: set initdb_option
          set_fact:
            initdb_option: "--{{ item.key }} {{ item.value }}"
          register: result
          with_dict: "{{ initdb }}"

        - name: initdb
          shell: /usr/pgsql-{{ pg_version_major }}/bin/initdb {{ result.results | join(" ", 'ansible_facts.initdb_option') }}
          become_user: postgres
          args:
            creates: "{{pgdata_dir}}postgresql.conf"
          register: initdb_result
        # - debug: var=initdb_result

        - name: rm pwfile
          file: path="{{ initdb.pwfile }}" state=absent
          changed_when: false

    # ##################################################
    # pg_hba.conf
    # ##################################################
    - tags: pg_hba.conf
      block:
        - stat: path="{{ pgdata_dir }}pg_hba.conf"
          register: f
        # - debug: var=f.stat.path
        # - debug: var=f.stat.exists

        - name: pg_hba.conf
          when: f.stat.exists
          blockinfile:
            path: "{{ pgdata_dir }}pg_hba.conf"
            content: "{{ pg_hba_conf.entries | join('\n') }}"

    # ##################################################
    # postgresql.conf
    # ##################################################
    - tags: postgresql.conf
      name: postgresql.conf
      blockinfile:
        path: "{{ pgdata_dir }}postgresql.conf"
        content: "{{ postgresql_conf.entries | join('\n') }}"

    # ##################################################
    # CREATE ROLE
    # ##################################################
    - tags: create_db_obj
      block:
        # service start
        - name: service started
          # changed_when: false
          systemd:
            name: postgresql-{{ pg_version_major }}.service
            state: started

        # CREATE ROLE : replication user and life check user
        - name: create role by postgresql_user
          postgresql_user:
            encrypted:       yes
            name:            "{{ item.name }}"
            password:        "{{ item.password }}"
            role_attr_flags: "{{ item.role_attr_flags }}"
          with_items: "{{ create_role }}"
          become_user: postgres

        # NOTE: Although there is no problem at the time of new construction,
        #       it will cause failover after operation.
        # service stop
        # - name: service stopped
        #   changed_when: false
        #   systemd:
        #     name: pgpool.service
        #     state: stopped
        - name: service stopped
          # changed_when: false
          systemd:
            name: postgresql-{{ pg_version_major }}.service
            state: stopped

    # ##################################################
    # logrotate
    # ##################################################
    - name: "stat: {{ pgdata_dir }}log/"
      stat: path="{{ pgdata_dir }}log/"
      register: f

    - tags: [logrotate, logrotate.conf.sh]
      name: logrotate.conf.sh
      when: f.stat.exists
      block:
        - name: postgresql.logrotate.conf
          template:
            src: postgresql.logrotate.conf.j2
            dest: "{{ pgdata_dir }}log/postgresql.logrotate.conf"
            owner: postgres
            group: postgres
        - name: postgresql.logrotate.sh
          template:
            src: postgresql.logrotate.sh.j2
            dest: "{{ pgdata_dir }}log/postgresql.logrotate.sh"
            owner: postgres
            group: postgres
        - name: postgresql.logrotate.service
          template:
            src: postgresql.logrotate.service.j2
            dest: "/etc/systemd/system/postgresql.logrotate.service"
        - name: postgresql.logrotate.timer
          template:
            src: postgresql.logrotate.timer.j2
            dest: "/etc/systemd/system/postgresql.logrotate.timer"
        - name: postgresql.logrotate.timer start
          systemd:
            name: postgresql.logrotate.timer
            state: started
